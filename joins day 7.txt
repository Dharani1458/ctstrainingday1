

JOINS :
?? Q1. List all orders with product names and prices.
select  Orders.OrderID, Product.ProductName,   Product.Price, Orders.Quantity,  
Orders.OrderDate
from  Orders join Product on Orders.ProductID = Product.ProductID;
+---------+-------------+---------+----------+------------+
| OrderID | ProductName | Price   | Quantity | OrderDate  |
+---------+-------------+---------+----------+------------+
|     101 | Laptop      | 1000.00 |        2 | 2025-08-01 |
|     104 | Laptop      | 1000.00 |        1 | 2025-08-04 |
|     102 | Mouse       |   25.00 |        5 | 2025-08-02 |
|     103 | Keyboard    |   45.00 |        3 | 2025-08-03 |
|     105 | Monitor     |  150.00 |        2 | 2025-08-04 |
|     106 | Webcam      |   75.00 |        4 | 2025-08-05 |
+---------+-------------+---------+----------+------------+



?? Q2. Show total amount for each order (price × quantity).
select   Orders.OrderID, Product.ProductName, Product.Price,Orders.Quantity,  (Product.Price * 
Orders.Quantity) as TotalAmount from Orders join Product on  Orders.ProductID = 
Product.ProductID;
+---------+-------------+---------+----------+-------------+
| OrderID | ProductName | Price   | Quantity | TotalAmount |
+---------+-------------+---------+----------+-------------+
|     101 | Laptop      | 1000.00 |        2 |     2000.00 |
|     104 | Laptop      | 1000.00 |        1 |     1000.00 |
|     102 | Mouse       |   25.00 |        5 |      125.00 |
|     103 | Keyboard    |   45.00 |        3 |      135.00 |
|     105 | Monitor     |  150.00 |        2 |      300.00 |
|     106 | Webcam      |   75.00 |        4 |      300.00 |
+---------+-------------+---------+----------+-------------+



?? Q3. Find all products that were never ordered.
select Product.ProductID,Product.ProductName,Product.Price from Product left join  Orders on 
Product.ProductID = Orders.ProductID where Orders.OrderID is null;



?? Q4. Get the total quantity sold per product.
select   Product.ProductName,  sum(Orders.Quantity) as TotalQuantitySold as Orders join 
Product on Orders.ProductID = Product.ProductID  group by Product.ProductName;
ctID = Product.ProductID  group by Product.ProductName;
+-------------+-------------------+
| ProductName | TotalQuantitySold |
+-------------+-------------------+
| Laptop      |                 3 |
| Mouse       |                 5 |
| Keyboard    |                 3 |
| Monitor     |                 2 |
| Webcam      |                 4 |
+-------------+-------------------+



?? Q5. Find the most recent order for each produc
select Product.ProductName, max(Orders.OrderDate) as MostRecentOrderDate from Orders 
join  Product on Orders.ProductID = Product.ProductID group by Product.ProductName;
+-------------+---------------------+
| ProductName | MostRecentOrderDate |
+-------------+---------------------+
| Laptop      | 2025-08-04          |
| Mouse       | 2025-08-02          |
| Keyboard    | 2025-08-03          |
| Monitor     | 2025-08-04          |
| Webcam      | 2025-08-05          |
+-------------+---------------------+



20 SQL JOIN-Based Questions
?? 1–5: Basic INNER JOIN Use
List all orders with product names and prices.
select Orders.OrderID, Product.ProductName,  Product.Price from Orders inner join Product on  
Orders.ProductID = Product.ProductID;
+---------+-------------+---------+
| OrderID | ProductName | Price   |
+---------+-------------+---------+
|     101 | Laptop      | 1000.00 |
|     104 | Laptop      | 1000.00 |
|     102 | Mouse       |   25.00 |
|     103 | Keyboard    |   45.00 |
|     105 | Monitor     |  150.00 |
|     106 | Webcam      |   75.00 |
+---------+-------------+---------+


Display OrderID, ProductName, Quantity, and total cost (Quantity × Price).
+---------+-------------+----------+-----------+
| OrderID | ProductName | Quantity | TotalCost |
+---------+-------------+----------+-----------+
|     101 | Laptop      |        2 |   2000.00 |
|     104 | Laptop      |        1 |   1000.00 |
|     102 | Mouse       |        5 |    125.00 |
|     103 | Keyboard    |        3 |    135.00 |
|     105 | Monitor     |        2 |    300.00 |
|     106 | Webcam      |        4 |    300.00 |
+---------+-------------+----------+-----------+


List all orders placed on or after '2025-08-03' with product details.
select   Orders.OrderID,Orders.OrderDate, Product.ProductName,Product.Price,  
Orders.Quantity from Orders inner join Product  onOrders.ProductID = Product.ProductID where 
Orders.OrderDate >= '2025-08-03';
+---------+------------+-------------+---------+----------+
| OrderID | OrderDate  | ProductName | Price   | Quantity |
+---------+------------+-------------+---------+----------+
|     103 | 2025-08-03 | Keyboard    |   45.00 |        3 |
|     104 | 2025-08-04 | Laptop      | 1000.00 |        1 |
|     105 | 2025-08-04 | Monitor     |  150.00 |        2 |
|     106 | 2025-08-05 | Webcam      |   75.00 |        4 |
+---------+------------+-------------+---------+----------+


Show only those orders where the quantity ordered is more than 3.
select Orders.OrderID,Product.ProductName,Orders.Quantity,  Product.Price from  Orders inner 
join Product  on Orders.ProductID = Product.ProductID where  Orders.Quantity > 3;

+---------+-------------+----------+-------+
| OrderID | ProductName | Quantity | Price |
+---------+-------------+----------+-------+
|     102 | Mouse       |        5 | 25.00 |
|     106 | Webcam      |        4 | 75.00 |
+---------+-------------+----------+-------+

List the products ordered along with their order date and price.
select  Product.ProductName, Orders.OrderDate, Product.Price from Orders inner join Product 
on Orders.ProductID = Product.ProductID;
+-------------+------------+---------+
| ProductName | OrderDate  | Price   |
+-------------+------------+---------+
| Laptop      | 2025-08-01 | 1000.00 |
| Laptop      | 2025-08-04 | 1000.00 |
| Mouse       | 2025-08-02 |   25.00 |
| Keyboard    | 2025-08-03 |   45.00 |
| Monitor     | 2025-08-04 |  150.00 |
| Webcam      | 2025-08-05 |   75.00 |
+-------------+------------+---------+



?? 6–10: Aggregations With JOINs
Find total quantity sold for each product.
select  Product.ProductName,sum (Orders.Quantity) AS TotalQuantitySold from Orders inner 
join  Product on Orders.ProductID = Product.ProductID group by Product.ProductName;
+-------------+-------------------+
| ProductName | TotalQuantitySold |
+-------------+-------------------+
| Laptop      |                 3 |
| Mouse       |                 5 |
| Keyboard    |                 3 |
| Monitor     |                 2 |
| Webcam      |                 4 |
+-------------+-------------------+


Get total revenue for each product (Price × Quantity).
select   Product.ProductName,sum(Product.Price * Orders.Quantity) as TotalRevenue from 
Orders inner join  Product on  Orders.ProductID = Product.ProductID group SELECT   
  +-------------+--------------+
| ProductName | TotalRevenue |
+-------------+--------------+
| Laptop      |      3000.00 |
| Mouse       |       125.00 |
| Keyboard    |       135.00 |
| Monitor     |       300.00 |
| Webcam      |       300.00 |
+-------------+--------------+

List all products along with the number of times they were ordered.
select   Product.ProductName,  count (Orders.OrderID) as TimesOrdered from Orders  inner join  
Product  on Orders.ProductID = Product.ProductID group by Product.ProductName;
    -> GROUP BY Product.ProductName;
+-------------+--------------+
| ProductName | TimesOrdered |
+-------------+--------------+
| Laptop      |            2 |
| Mouse       |            1 |
| Keyboard    |            1 |
| Monitor     |            1 |
| Webcam      |            1 |
+-------------+--------------+


Show average quantity per order for each product.
select   Product.ProductName,avg(Orders.Quantity) as AvgQuantityPerOrder from Orders inner 
join Product on Orders.ProductID = Product.ProductID group by Product.ProductName;
+-------------+---------------------+
| ProductName | AvgQuantityPerOrder |
+-------------+---------------------+
| Laptop      |              1.5000 |
| Mouse       |              5.0000 |
| Keyboard    |              3.0000 |
| Monitor     |              2.0000 |
| Webcam      |              4.0000 |
+-------------+---------------------+


Find the product with the highest revenue.
select  Product.ProductName,sum(Product.Price * Orders.Quantity) as TotalRevenue from  
Orders inner join  Product on  Orders.ProductID = Product.ProductID group by  
Product.ProductName group by TotalRevenue desc limit 1;
+-------------+--------------+
| ProductName | TotalRevenue |
+-------------+--------------+
| Laptop      |      3000.00 |
+-------------+--------------+



?? 11–15: LEFT JOIN (Handling Missing Orders)
List all products even if they have never been ordered.
 select Product.ProductName,Product.Price,Orders.OrderID,Orders.Quantity from Product left 
join Orders on Product.ProductID = Orders.ProductID;
+-------------+---------+---------+----------+
| ProductName | Price   | OrderID | Quantity |
+-------------+---------+---------+----------+
| Laptop      | 1000.00 |     101 |        2 |
| Laptop      | 1000.00 |     104 |        1 |
| Mouse       |   25.00 |     102 |        5 |
| Keyboard    |   45.00 |     103 |        3 |
| Monitor     |  150.00 |     105 |        2 |
| Webcam      |   75.00 |     106 |        4 |
+-------------+---------+---------+----------+
6 rows in set (0.00 sec)

Show product names and total quantity sold (0 if never ordered).
 select Product.ProductName, ifnull(sum(Orders.Quantity), 0) as TotalQuantitySold from 
Product left join Orders on Product.ProductID = Orders.ProductID group by 
Product.ProductName;
+-------------+-------------------+
| ProductName | TotalQuantitySold |
+-------------+-------------------+
| Laptop      |                 3 |
| Mouse       |                 5 |
| Keyboard    |                 3 |
| Monitor     |                 2 |
| Webcam      |                 4 |
+-------------+-------------------+

Find products that were never ordered.
 select Product.ProductName from Product left join Orders on Product.ProductID = 
Orders.ProductID where Orders.OrderID is null;
Empty set (0.00 sec)
Display product names with number of orders and revenue (include 0s).
 select  Product.ProductName,count(Orders.OrderID) as NumberOfOrders, 
ifnull(sum(Product.Price * Orders.Quantity), 0) as TotalRevenue from Product left join Orders on 
Product.ProductID = Orders.ProductID group by Product.ProductName;
+-------------+----------------+--------------+
| ProductName | NumberOfOrders | TotalRevenue |
+-------------+----------------+--------------+
| Laptop      |              2 |      3000.00 |
| Mouse       |              1 |       125.00 |
| Keyboard    |              1 |       135.00 |
| Monitor     |              1 |       300.00 |
| Webcam      |              1 |       300.00 |
+-------------+----------------+--------------+

List all products and their most recent order date (if any).
select  Product.ProductName,max(Orders.OrderDate) as MostRecentOrderDate from Product 
left join Orders on Product.ProductID = Orders.ProductID group by Product.ProductName;
+-------------+---------------------+
| ProductName | MostRecentOrderDate |
+-------------+---------------------+
| Laptop      | 2025-08-04          |
| Mouse       | 2025-08-02          |
| Keyboard    | 2025-08-03          |
| Monitor     | 2025-08-04          |
| Webcam      | 2025-08-05          |
+-------------+---------------------+


?? 16–20: Conditions and Filters With JOINs
List all orders for products costing more than $100.
 select  Orders.OrderID, Product.ProductName,Product.Price, Orders.Quantity from Orders 
inner join Product on Orders.ProductID = Product.ProductID where Product.Price > 100;
+---------+-------------+---------+----------+
| OrderID | ProductName | Price   | Quantity |
+---------+-------------+---------+----------+
|     101 | Laptop      | 1000.00 |        2 |
|     104 | Laptop      | 1000.00 |        1 |
|     105 | Monitor     |  150.00 |        2 |
+---------+-------------+---------+----------+

Find orders where total cost exceeds $300.
 select  Orders.OrderID, Product.ProductName, Orders.Quantity, (Product.Price * 
Orders.Quantity) as TotalCost from Orders  inner join Product on Orders.ProductID = 
Product.ProductID where (Product.Price * Orders.Quantity) > 300;
+---------+-------------+----------+-----------+
| OrderID | ProductName | Quantity | TotalCost |
+---------+-------------+----------+-----------+
|     101 | Laptop      |        2 |   2000.00 |
|     104 | Laptop      |        1 |   1000.00 |
+---------+-------------+----------+-----------+

Show all products that were ordered on '2025-08-04'.
 select distinct Product.ProductName from Orders inner join Product on Orders.ProductID = 
Product.ProductID where Orders.OrderDate = '2025-08-04';
+-------------+
| ProductName |
+-------------+
| Laptop      |
| Monitor     |
+-------------+

List products that have been ordered more than once.
 select  Product.ProductName,count(Orders.OrderID) as NumberOfOrders from Orders inner 
join Product  on Orders.ProductID = Product.ProductID  group by Product.ProductName having 
count(Orders.OrderID) > 1;
+-------------+----------------+
| ProductName | NumberOfOrders |
+-------------+----------------+
| Laptop      |              2 |
+-------------+----------------+

List all products that were ordered less than 2 times or never ordered.
select  Product.ProductName,COUNT(Orders.OrderID) as NumberOfOrders from Product  left 
join Orders on Product.ProductID = Orders.ProductID group by Product.ProductName having 
count(Orders.OrderID) < 2;
+-------------+----------------+
| ProductName | NumberOfOrders |
+-------------+----------------+
| Mouse       |              1 |
| Keyboard    |              1 |
| Monitor     |              1 |
| Webcam      |              1 |
+-------------+----------------+


Employee
1.	Show total hours worked by each employee across all projects.
mysql> select empid, sum(hoursworked)
    -> from workson
    -> group by empid;
+-------+------------------+
| empid | sum(hoursworked) |
+-------+------------------+
|   101 |               75 |
|   102 |               10 |
|   103 |               45 |
|   104 |               25 |
|   105 |               20 |
|   107 |               15 |
|   108 |               60 |
+-------+------------------+
2.	Get the second highest salary in the company.
mysql> SELECT Salary
    -> FROM Employee
    -> WHERE Salary < (SELECT MAX(Salary) FROM Employee)
    -> ORDER BY Salary DESC
    -> LIMIT 1;
+----------+
| Salary   |
+----------+
| 90000.00 |
+----------+
3.	List all departments located in 'New York'.
mysql> select departmentid,deptname,location
    -> from department
    -> where location='new york';
+--------------+-----------+----------+
| departmentid | deptname  | location |
+--------------+-----------+----------+
|            1 | HR        | New York |
|            4 | Marketing | New York |
+--------------+-----------+----------+
4.	Show departments and their total project budgets.
mysql> select departmentid,sum(budget)
    -> from project
    -> group by departmentid;
+--------------+-------------+
| departmentid | sum(budget) |
+--------------+-------------+
|            2 |   420000.00 |
|            1 |    50000.00 |
|            3 |   150000.00 |
|            4 |    95000.00 |
|            5 |    75000.00 |
+--------------+-------------+
5.	Find employees who earn more than the average salary.
mysql> select empid,firstname,lastname,salary
    -> from employee
    -> where salary > (select avg(salary) from employee);
+-------+-----------+----------+----------+
| empid | firstname | lastname | salary   |
+-------+-----------+----------+----------+
|   101 | Alice     | Smith    | 90000.00 |
|   103 | Charlie   | Williams | 85000.00 |
|   104 | Diana     | Brown    | 92000.00 |
|   108 | Hannah    | Davis    | 88000.00 |
+-------+-----------+----------+----------+
6.	List employees who have not been assigned to any project.
mysql> select empid,firstname,lastname
    -> from employee
    -> where empid not in (select empid from workson);
+-------+-----------+----------+
| empid | firstname | lastname |
+-------+-----------+----------+
|   106 | Fiona     | Garcia   |
+-------+-----------+----------+
7.	Show all employees, even if they don't belong to a department.
mysql> select departmentid,count(empid)
    -> from employee
    -> group by departmentid;
+--------------+--------------+
| departmentid | count(empid) |
+--------------+--------------+
|            2 |            3 |
|            1 |            1 |
|            3 |            1 |
|            4 |            1 |
|         NULL |            1 |
|            5 |            1 |
+--------------+--------------+
8.	Display the number of employees per department.
mysql> select departmentid,count(empid)
    -> from employee
    -> group by departmentid;
+--------------+--------------+
| departmentid | count(empid) |
+--------------+--------------+
|            2 |            3 |
|            1 |            1 |
|            3 |            1 |
|            4 |            1 |
|         NULL |            1 |
|            5 |            1 |
+--------------+--------------+
9.	Find departments with average salary above $70,000.
mysql> select departmentid
    -> from employee
    -> group by departmentid
    -> having avg(salary)>70000;
+--------------+
| departmentid |
+--------------+
|            2 |
|            3 |
|            4 |
|            5 |
+--------------+
10.	List projects with total hours worked exceeding 100.

mysql> select projectid,sum(hoursworked)
    -> from workson
    -> group by projectid
    -> having sum(hoursworked)>100;
11. Show employee names along with the projects they work on.
mysql> select firstname,lastname,projectid
    -> from employee,workson
    -> where employee.empid=workson.empid;
+-----------+----------+-----------+
| firstname | lastname | projectid |
+-----------+----------+-----------+
| Alice     | Smith    |       201 |
| Alice     | Smith    |       205 |
| Bob       | Johnson  |       202 |
| Charlie   | Williams |       201 |
| Charlie   | Williams |       205 |
| Diana     | Brown    |       203 |
| Evan      | Jones    |       204 |
| George    | Miller   |       206 |
| Hannah    | Davis    |       201 |
| Hannah    | Davis    |       205 |
+-----------+----------+-----------+
12. Get employees and their project hours, ordered by hours descending.

mysql> select empid,projectid,hoursworked
    -> from workson
    -> order by hoursworked desc;
+-------+-----------+-------------+
| empid | projectid | hoursworked |
+-------+-----------+-------------+
|   101 |       201 |          40 |
|   108 |       205 |          40 |
|   101 |       205 |          35 |
|   103 |       201 |          30 |
|   104 |       203 |          25 |
|   105 |       204 |          20 |
|   108 |       201 |          20 |
|   103 |       205 |          15 |
|   107 |       206 |          15 |
|   102 |       202 |          10 |
+-------+-----------+-------------+
13.	List employees who joined in the last 1 year.
mysql> select empid,firstname,lastname
    -> from employee
    -> where hiredate>=date_sub(curdate(),interval 1 year);
Empty set (0.00 sec)
14.	What is the average salary of all employees?

mysql> select avg(salary) from employee;
+--------------+
| avg(salary)  |
+--------------+
| 80875.000000 |
+--------------+
15.	Show full names and hire dates of employees hired after 2020.
mysql> select firstname,lastname,hiredate
    -> from employee
    -> where hiredate>'2020-12-31';
+-----------+----------+------------+
| firstname | lastname | hiredate   |
+-----------+----------+------------+
| Alice     | Smith    | 2021-05-10 |
| Diana     | Brown    | 2022-06-01 |
| Evan      | Jones    | 2021-11-05 |
| George    | Miller   | 2023-03-27 |
| Hannah    | Davis    | 2024-02-10 |
16.	List employees who work on more than 3 projects.

mysql> select empid
    -> from workson
    -> group by empid
    -> having count(projectid)>3;
Empty set (0.00 sec)
17.	Show the attendance percentage of each employee for a given month.
mysql> select empid,(sum(case when status = 'present' then 1 else 0 end)/count(*))*100
    -> from attendance
    -> where date between '20205-08-01' and '2025-08-31'
    -> group by empid;
+-------+--------------------------------------------------------------------+
| empid | (sum(case when status = 'present' then 1 else 0 end)/count(*))*100 |
+-------+--------------------------------------------------------------------+
|   101 |                                                            66.6667 |
|   102 |                                                           100.0000 |
|   103 |                                                           100.0000 |
|   104 |                                                            50.0000 |
|   105 |                                                           100.0000 |
|   106 |                                                           100.0000 |
|   107 |                                                            50.0000 |
|   108 |                                                           100.0000 |
+-------+--------------------------------------------------------------------+
8 rows in set, 12 warnings (0.07 sec)
18.	Display department names along with total number of employees in each.
mysql> select departmentid,count(empid)
    -> from employee
    ->  group by departmentid;
+--------------+--------------+
| departmentid | count(empid) |
+--------------+--------------+
|            2 |            3 |
|            1 |            1 |
|            3 |            1 |
|            4 |            1 |
|         NULL |            1 |
|            5 |            1 |
+--------------+--------------+
19.	Get the name of the department with the highest average salary.
mysql> select departmentid
    -> from employee
    -> group by departmentid
    -> order by avg(salary) desc
    -> limit 1;
+--------------+
| departmentid |
+--------------+
|            3 |
+--------------+
1 row in set (0.00 sec)
20.	Find the highest and lowest project budgets.
mysql> select max(budget),min(budget) from project;
+-------------+-------------+
| max(budget) | min(budget) |
+-------------+-------------+
|   300000.00 |    50000.00 |
+-------------+-------------+
1 row in set (0.00 sec)
21.	List employees who don’t work on any project using a subquery.
mysql> select empid, firstname, lastname
    -> from employee
    -> where empid not in (select empid from workson);
+-------+-----------+----------+
| empid | firstname | lastname |
+-------+-----------+----------+
|   106 | Fiona     | Garcia   |
+-------+-----------+----------+
22.	Find employees who earn more than $80,000.
mysql> select empid, firstname, lastname, salary
    -> from employee
    -> where salary > 80000;
+-------+-----------+----------+----------+
| empid | firstname | lastname | salary   |
+-------+-----------+----------+----------+
|   101 | Alice     | Smith    | 90000.00 |
|   103 | Charlie   | Williams | 85000.00 |
|   104 | Diana     | Brown    | 92000.00 |
|   108 | Hannah    | Davis    | 88000.00 |
+-------+-----------+----------+----------+
23.	List all projects with a budget over $1,000,000.
mysql> select projectid, projectname, budget
    -> from project
    -> where budget > 1000000;
Empty set (0.00 sec)
24.	Show employees and the number of projects they work on.

mysql> select empid, count(projectid)
    -> from workson
    -> group by empid;
+-------+------------------+
| empid | count(projectid) |
+-------+------------------+
|   101 |                2 |
|   102 |                1 |
|   103 |                2 |
|   104 |                1 |
|   105 |                1 |
|   107 |                1 |
|   108 |                2 |
+-------+------------------+
25.	List all employees and their salaries.

mysql> select empid, firstname, lastname, salary from employee;
+-------+-----------+----------+----------+
| empid | firstname | lastname | salary   |
+-------+-----------+----------+----------+
|   101 | Alice     | Smith    | 90000.00 |
|   102 | Bob       | Johnson  | 70000.00 |
|   103 | Charlie   | Williams | 85000.00 |
|   104 | Diana     | Brown    | 92000.00 |
|   105 | Evan      | Jones    | 75000.00 |
|   106 | Fiona     | Garcia   | 68000.00 |
|   107 | George    | Miller   | 79000.00 |
|   108 | Hannah    | Davis    | 88000.00 |
+-------+-----------+----------+----------+

26.	Find employees who work on all projects.
mysql> select empid
    -> from workson
    -> group by empid
    -> having count(projectid) = (select count(projectid) from project);
Empty set (0.03 sec)
27.	List all projects and employees (if any) working on them — include projects with no 
workers.
mysql> select project.projectid, workson.empid
    -> from project left join workson on project.projectid = workson.projectid;
+-----------+-------+
| projectid | empid |
+-----------+-------+
|       201 |   101 |
|       201 |   103 |
|       201 |   108 |
|       202 |   102 |
|       203 |   104 |
|       204 |   105 |
|       205 |   101 |
|       205 |   103 |
|       205 |   108 |
|       206 |   107 |
+-----------+-------+
28.	Count how many days each employee was present in August 2025.

mysql> select empid, count(*)
    -> from attendance
    -> where status = 'present' and date between '2025-08-01' and '2025-08-31'
    -> group by empid;
+-------+----------+
| empid | count(*) |
+-------+----------+
|   101 |        2 |
|   102 |        1 |
|   103 |        1 |
|   104 |        1 |
|   105 |        1 |
|   106 |        1 |
|   107 |        1 |
|   108 |        1 |
+-------+----------+
8 rows in set (0.01 sec)
29.	Show the top 3 employees with the most project hours.
mysql> select empid, sum(hoursworked)
    -> from workson
    -> group by empid
    -> order by sum(hoursworked) desc
    -> limit 3;
+-------+------------------+
| empid | sum(hoursworked) |
+-------+------------------+
|   101 |               75 |
|   108 |               60 |
|   103 |               45 |
30.	Display all projects with their associated department names.

mysql> select projectname, deptname
    -> from project, department
    -> where project.departmentid = department.departmentid;
+-------------------+------------+
| projectname       | deptname   |
+-------------------+------------+
| Website Redesign  | IT         |
| Recruitment Drive | HR         |
| Financial Audit   | Finance    |
| Ad Campaign       | Marketing  |
| System Migration  | IT         |
| Client Onboarding | Operations |
+-------------------+------------+
31.	Get the average number of hours worked per employee.
mysql> select avg(hoursworked) from workson;
+------------------+
| avg(hoursworked) |
+------------------+
|          25.0000 |
+------------------+
32.	List departments where no project exceeds a budget of $500,000.
mysql> select departmentid
    -> from project
    -> group by departmentid
    -> having max(budget) <= 500000;
+--------------+
| departmentid |
+--------------+
|            2 |
|            1 |
|            3 |
|            4 |
|            5 |
+--------------+
33.	Show total salary cost per department.
mysql> select departmentid, sum(salary)
    -> from employee
    -> group by departmentid;
+--------------+-------------+
| departmentid | sum(salary) |
+--------------+-------------+
|            2 |   263000.00 |
|            1 |    70000.00 |
|            3 |    92000.00 |
|            4 |    75000.00 |
|         NULL |    68000.00 |
|            5 |    79000.00 |
+--------------+-------------+
34.	Get employees whose first name starts with 'A'.
mysql> select empid, firstname, lastname
    -> from employee
    -> where firstname like 'a%';
+-------+-----------+----------+
| empid | firstname | lastname |
+-------+-----------+----------+
|   101 | Alice     | Smith    |
+-------+-----------+----------+
1 row in set (0.04 sec)
35.	Show all projects belonging to the 'IT' department.
mysql> select projectname
    -> from project, department
    -> where project.departmentid = department.departmentid and deptname = 'it';
+------------------+
| projectname      |
+------------------+
| Website Redesign |
| System Migration |
+------------------+
36.	List employees and their first day of attendance.

mysql> select empid, min(date)
    -> from attendance
    -> group by empid;
+-------+------------+
| empid | min(date)  |
+-------+------------+
|   101 | 2025-08-01 |
|   102 | 2025-08-01 |
|   103 | 2025-08-01 |
|   104 | 2025-08-01 |
|   105 | 2025-08-01 |
|   106 | 2025-08-01 |
|   107 | 2025-08-01 |
|   108 | 2025-08-01 |
+-------+------------+
37.	Show departments with no employees.
mysql> select departmentid
    -> from department
    -> where departmentid not in (select departmentid from employee where departmentid is not 
null);
Empty set (0.07 sec)
38.	Find employees who were absent more than 5 times in the last 30 days.

mysql> select empid
    -> from attendance
    -> where status = 'absent' and date >= date_sub(curdate(), interval 30 day)
    -> group by empid
    -> having count(*) > 5;
Empty set (0.01 sec)
39.	List employees who were ordered by highest project hours (include zero if none).
mysql> select employee.empid, coalesce(sum(hoursworked), 0)
    -> from employee left join workson on employee.empid = workson.empid
    -> group by employee.empid
    -> order by coalesce(sum(hoursworked), 0) desc;
+-------+-------------------------------+
| empid | coalesce(sum(hoursworked), 0) |
+-------+-------------------------------+
|   101 |                            75 |
|   108 |                            60 |
|   103 |                            45 |
|   104 |                            25 |
|   105 |                            20 |
|   107 |                            15 |
|   102 |                            10 |
|   106 |                             0 |
+-------+-------------------------------+
40.	Display employee
mysql> select * from employee;
+-------+-----------+----------+--------------+----------+------------+
| EmpID | FirstName | LastName | DepartmentID | Salary   | HireDate   |
+-------+-----------+----------+--------------+----------+------------+
|   101 | Alice     | Smith    |            2 | 90000.00 | 2021-05-10 |
|   102 | Bob       | Johnson  |            1 | 70000.00 | 2019-08-20 |
|   103 | Charlie   | Williams |            2 | 85000.00 | 2020-01-15 |
|   104 | Diana     | Brown    |            3 | 92000.00 | 2022-06-01 |
|   105 | Evan      | Jones    |            4 | 75000.00 | 2021-11-05 |
|   106 | Fiona     | Garcia   |         NULL | 68000.00 | 2020-09-12 |
|   107 | George    | Miller   |            5 | 79000.00 | 2023-03-27 |
|   108 | Hannah    | Davis    |            2 | 88000.00 | 2024-02-10 |
+-------+-----------+----------+--------------+----------+------------+
